generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum Role {
  SUPER_ADMIN
  PARTNER
  USER
}

enum VehicleType {
  TWO_WHEELER
  THREE_WHEELER
  FOUR_WHEELER
  SIX_WHEELER
  OTHER
}

enum AppVersionTags {
  BETA
  STABLE
  BUGFIX
  PATCH
}

model KotAppVersion {
  id                    String           @id @default(uuid()) @db.Uuid
  version               String
  title                 String
  description           String[]
  mandatory             Boolean          @default(false)
  platforms             String[]
  release_notes_url     String?
  release_date          DateTime
  min_supported_version String?
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  author                String
  tags                  AppVersionTags[] @default([STABLE])
  additional_info       Json?

  @@unique([version, platforms])
  @@index([version])
  @@index([platforms])
}

model KotAppUser {
  id         String   @id @default(uuid())
  deviceId   String   @unique
  lastUsedAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(255)
  profilePic     String?          @db.VarChar(255)
  isVerified     Boolean          @default(false)
  role           Role             @default(USER)
  auth           Auth?
  parkingLots    ParkingLot[]
  ParkingSlot    ParkingSlot[]
  bookings       Booking[] // Add relation to bookings
  createdAt      DateTime         @default(now()) @db.Timestamp()
  updatedAt      DateTime         @updatedAt @db.Timestamp()
  deletedAt      DateTime?        @db.Timestamp()
  bookingHistory BookingHistory[]
  Email          Email[]
  Transaction    Transaction[]
  Invoice        Invoice[]

  @@index([role])
  @@index([name])
  @@index([deletedAt])
}

model Email {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  email  String   @unique @db.VarChar(255) // optional: use for logging or recipient if useful
  sentTo String   @db.VarChar(255) // the address where the email was sent
  count  Int      @default(0) // total sends to this recipient
  sentAt DateTime @default(now()) // timestamp of when the email was sent

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([userId, sentTo, sentAt])
}

model Auth {
  id           String    @id @default(uuid())
  isInternal   Boolean   @default(false)
  email        String    @unique
  phone        String?   @unique @db.VarChar(20)
  userId       String    @unique
  otp          Int       @default(0)
  otpExpiresAt DateTime  @db.Timestamp()
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens       Token[]
  status       Status    @default(ACTIVE)
  createdAt    DateTime  @default(now()) @db.Timestamp()
  updatedAt    DateTime  @updatedAt @db.Timestamp()
  deletedAt    DateTime? @db.Timestamp()

  @@index([isInternal])
  @@index([status])
  @@index([deletedAt])
}

model Token {
  id         String    @id @default(uuid())
  token      String    @unique @db.Text
  agent      String    @db.VarChar(255)
  authId     String
  auth       Auth      @relation(fields: [authId], references: [id], onDelete: Cascade)
  issuedAt   DateTime  @default(now()) @db.Timestamp()
  expiresAt  DateTime  @db.Timestamp()
  lastUsedAt DateTime? @db.Timestamp()
  revoked    Boolean   @default(false)
  revokedAt  DateTime? @db.Timestamp()
  revokedBy  String?   @db.VarChar(255)
  deletedAt  DateTime? @db.Timestamp()
  createdAt  DateTime  @default(now()) @db.Timestamp()
  updatedAt  DateTime  @updatedAt @db.Timestamp()

  @@index([authId, token])
  @@index([revokedAt])
  @@index([lastUsedAt])
  @@index([deletedAt])
}

enum PlanStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model Plan {
  id        String    @id @default(uuid())
  price     Float
  discount  Int       @default(25)
  duration  Int       @default(30) @db.Integer
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  @@index([price])
}

model ParkingSlot {
  id             String           @id @default(uuid())
  slotNumber     String
  isOccupied     Boolean          @default(false)
  type           VehicleType      @default(TWO_WHEELER)
  userId         String?
  user           User?            @relation(fields: [userId], references: [id])
  parkingLot     ParkingLot       @relation(fields: [parkingLotId], references: [id])
  parkingLotId   String
  expiresAt      DateTime?
  bookings       Booking[] // Add relation to bookings
  createdAt      DateTime         @default(now()) @db.Timestamp()
  updatedAt      DateTime         @updatedAt @db.Timestamp()
  deletedAt      DateTime?        @db.Timestamp()
  transactionId  String?
  transaction    Transaction?
  bookingHistory BookingHistory[]

  @@unique([slotNumber, parkingLotId])
  @@index([isOccupied])
  @@index([type])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Booking {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  parkingSlot   ParkingSlot      @relation(fields: [parkingSlotId], references: [id])
  parkingSlotId String
  parkingLot    ParkingLot       @relation(fields: [parkingLotId], references: [id])
  parkingLotId  String
  date          DateTime         @default(now())
  startTime     DateTime         @db.Timestamp()
  endTime       DateTime?
  vehicleNumber String?
  bookingStatus BookingStatus    @default(PENDING)
  paymentStatus PaymentStatus    @default(PENDING)
  amount        Float
  paymentMethod String?
  transactionId String?
  otp           String?
  otpExpiry     DateTime?
  otpVerified   Boolean          @default(false)
  createdAt     DateTime         @default(now()) @db.Timestamp()
  updatedAt     DateTime         @updatedAt @db.Timestamp()
  cancelledAt   DateTime?        @db.Timestamp()
  history       BookingHistory[] // Add relation to booking history
  Transaction   Transaction[]

  @@index([userId])
  @@index([parkingSlotId])
  @@index([parkingLotId])
  @@index([bookingStatus])
  @@index([paymentStatus])
  @@index([startTime, endTime])
  @@index([otp])
}

model BookingHistory {
  id                    String         @id @default(uuid())
  booking               Booking        @relation(fields: [bookingId], references: [id])
  bookingId             String
  userId                String
  parkingLotId          String
  parkingslot           ParkingSlot    @relation(fields: [parkingSlotId], references: [id])
  user                  User           @relation(fields: [userId], references: [id])
  parkingLot            ParkingLot     @relation(fields: [parkingLotId], references: [id])
  parkingSlotId         String
  action                String // e.g., "CREATED", "UPDATED", "CANCELLED", "COMPLETED"
  previousStatus        BookingStatus?
  newStatus             BookingStatus?
  previousPaymentStatus PaymentStatus?
  newPaymentStatus      PaymentStatus?
  metadata              Json? // Additional data about the change
  performedBy           String? // User ID who performed the action (could be system)
  createdAt             DateTime       @default(now()) @db.Timestamp()

  @@index([bookingId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model ParkingLot {
  id             String           @id @default(uuid())
  name           String
  address        String
  city           String
  price          Int              @default(30)
  rating         String[]         @default([])
  distance       String?
  openHours      String           @default("24/7")
  description    String
  image          String?
  status         Status           @default(INACTIVE)
  features       String[]         @default([])
  gallery        String[]         @default([])
  owner          User?            @relation(fields: [userId], references: [id])
  userId         String?
  slots          ParkingSlot[]
  bookings       Booking[]
  deletedAt      DateTime?        @db.Timestamp()
  createdAt      DateTime         @default(now()) @db.Timestamp()
  updatedAt      DateTime         @updatedAt @db.Timestamp()
  bookingHistory BookingHistory[]

  @@index([status])
  @@index([deletedAt])
  @@index([name])
  @@index([price])
}

enum Currency {
  INR
  USD
  EUR
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  CASH
}

model Transaction {
  id            String        @id @default(uuid())
  transactionId String        @unique
  bookingId     String?
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  slotNumber    Int?
  planId        String?
  amount        Float
  currency      Currency      @default(INR)
  provider      String? // e.g., "stripe", "razorpay", "paypal"
  paymentId     String        @unique // transaction ID from provider
  paymentStatus PaymentStatus @default(PAID)
  method        PaymentMethod @default(CASH) // card, upi, wallet
  receiptUrl    String? // link to receipt from gateway
  failureReason String?
  notes         Json? // optional metadata from provider

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  deletedAt DateTime? @db.Timestamp()

  slotId  String?      @unique
  slot    ParkingSlot? @relation(fields: [slotId], references: [id])
  Invoice Invoice[]
  userId  String
  user    User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([bookingId])
  @@index([paymentId])
  @@index([paymentStatus])
}

model Invoice {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  invoiceNumber String      @unique
  lineItems     Json // breakdown of charges: slot fee, tax, discount
  totalAmount   Float
  taxAmount     Float       @default(0)
  discount      Float       @default(0)
  status        String      @default("PAID") // could be PAID, CANCELLED, REFUNDED
  issuedAt      DateTime    @default(now())
  dueDate       DateTime?
  notes         String?

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  @@index([userId])
  @@index([transactionId])
  @@index([invoiceNumber])
}
